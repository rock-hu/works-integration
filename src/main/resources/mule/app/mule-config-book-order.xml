<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf"
	xmlns:pattern="http://www.mulesoft.org/schema/mule/pattern" xmlns:axis="http://www.mulesoft.org/schema/mule/axis"
	xmlns:sec="http://www.mulesoft.org/schema/mule/spring-security"
	xmlns:activiti="http://www.mulesoft.org/schema/mule/activiti"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:jdbc="http://www.mulesoft.org/schema/mule/jdbc"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:email="http://www.mulesoft.org/schema/mule/email"
	xmlns:ftp="http://www.mulesoft.org/schema/mule/ftp" xmlns:servlet="http://www.mulesoft.org/schema/mule/servlet"
	xmlns:jetty="http://www.mulesoft.org/schema/mule/jetty"
	xsi:schemaLocation="
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.3/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.3/mule-http.xsd
        http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/3.3/mule-cxf.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/3.3/mule-scripting.xsd
        http://www.mulesoft.org/schema/mule/pattern http://www.mulesoft.org/schema/mule/pattern/3.3/mule-pattern.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.3/mule-vm.xsd
        http://www.mulesoft.org/schema/mule/axis http://www.mulesoft.org/schema/mule/axis/3.3/mule-axis.xsd
        http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.3/mule-spring-security.xsd
        http://www.mulesoft.org/schema/mule/activiti http://www.mulesoft.org/schema/mule/activiti/3.3/mule-activiti.xsd
        http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/3.3/mule-jms.xsd
        http://www.mulesoft.org/schema/mule/jdbc http://www.mulesoft.org/schema/mule/jdbc/3.3/mule-jdbc.xsd
        http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/3.3/mule-file.xsd
        http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/3.3/mule-email.xsd
        http://www.mulesoft.org/schema/mule/ftp http://www.mulesoft.org/schema/mule/ftp/3.3/mule-ftp.xsd
        http://www.mulesoft.org/schema/mule/servlet http://www.mulesoft.org/schema/mule/servlet/3.3/mule-servlet.xsd
        http://www.mulesoft.org/schema/mule/jetty http://www.mulesoft.org/schema/mule/jetty/3.3/mule-jetty.xsd">


	<context:property-placeholder location="email.properties" />

	<!-- <jetty:connector name="jettyConnector"> -->
	<!-- <jetty:webapps directory="${app.home}/webapps" port="8083" /> -->
	<!-- </jetty:connector> -->

	<!-- Configure some properties to work with GMail's SMTP -->
	<smtp:gmail-connector name="emailConnector" />

	<!-- Use this as a poor man's message queue, in the real world we would 
		use JMS -->
	<vm:connector name="vmQueues" />

	<!-- This queue contains a feed of the latest statistics generated by the 
		Data Warehouse (it should really be a LIFO queue) -->
	<vm:endpoint name="stats" path="statistics"
		exchange-pattern="one-way" />

	<!-- Convert request parameters to Book object -->
	<custom-transformer name="HttpRequestToBook"
		class="org.works.message.transformer.HttpRequestToBook" />

	<!-- Format response to be a nice HTML page -->
	<custom-transformer name="AddBookResponse"
		class="org.works.message.transformer.AddBookResponse" />

	<custom-transformer name="OrderToEmail"
		class="org.works.message.transformer.OrderToEmailTransformer" />

	<custom-transformer name="StringToEmail"
		class="org.mule.transport.email.transformers.StringToEmailMessage" />

	<spring:bean class="org.works.message.ws.impl.CatalogServiceImpl"
		name="CatalogService" init-method="initialise" />

	<message-properties-transformer name="setHtmlContentType"
		overwrite="true">
		<add-message-property key="Content-Type" value="text/html" />
		<!-- Tomcat lowercases headers, need to drop this old one too -->
		<delete-message-property key="content-type" />
	</message-properties-transformer>

	<!-- Administration interface -->
	<flow name="CatalogAdminInterface">
		<inbound-endpoint address="servlet://catalog"
			exchange-pattern="request-response" transformer-refs="HttpRequestToBook"
			responseTransformer-refs="AddBookResponse setHtmlContentType"
			doc:name="Administration interface" />

		<component doc:name="Catalog Service">
			<spring-object bean="CatalogService" />
		</component>
	</flow>

	<!-- Public interface -->
	<flow name="CatalogPublicInterface">
		<http:inbound-endpoint address="http://0.0.0.0:8777/services/catalog"
			exchange-pattern="request-response" doc:name="Public interface" />
		<cxf:jaxws-service serviceClass="org.works.message.ws.CatalogService" />
		<component doc:name="Catalog Service">
			<spring-object bean="CatalogService" />
		</component>
	</flow>

	<flow name="OrderService">
		<http:inbound-endpoint address="http://0.0.0.0:8777/services/order"
			exchange-pattern="request-response" doc:name="Public order interface" />
		<cxf:jaxws-service serviceClass="org.works.message.ws.OrderService" />
		<component doc:name="Order Service">
			<singleton-object class="org.works.message.ws.impl.OrderServiceImpl" />
		</component>
		<async>
			<vm:outbound-endpoint path="emailNotification"
				exchange-pattern="one-way" doc:name="Email Notification" />
			<vm:outbound-endpoint path="dataWarehouse"
				exchange-pattern="one-way" doc:name="Data Warehouse" />
		</async>
	</flow>

	<flow name="EmailNotificationService">
		<vm:inbound-endpoint path="emailNotification"
			exchange-pattern="one-way" doc:name="Email Notification" />
		<smtps:outbound-endpoint user="${user}"
			password="${password}" host="${host}" from="${from}"
			subject="Your order has been placed!" transformer-refs="OrderToEmail StringToEmail"
			doc:name="Send notification email" />
	</flow>

	<flow name="DataWarehouse">
		<vm:inbound-endpoint path="dataWarehouse"
			exchange-pattern="one-way" doc:name="Data Warehouse" />
		<component doc:name="Data Warehouse component">
			<singleton-object class="org.mule.example.bookstore.DataWarehouse" />
		</component>
		<vm:outbound-endpoint ref="stats"
			transformer-refs="setHtmlContentType" doc:name="Statistics queue" />
	</flow>
</mule>
